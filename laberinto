{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPxtDdVnTv5Tdeb6BHMMcqL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/WilliamEFonseca/Machine-Learning/blob/main/laberinto\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "IiRKytU_6-i6",
        "outputId": "489fdc89-6bc8-44a6-edb4-713a26bc29f2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Episodio 100/1000 completado.\n",
            "Episodio 200/1000 completado.\n",
            "Episodio 300/1000 completado.\n",
            "Episodio 400/1000 completado.\n",
            "Episodio 500/1000 completado.\n",
            "Episodio 600/1000 completado.\n",
            "Episodio 700/1000 completado.\n",
            "Episodio 800/1000 completado.\n",
            "Episodio 900/1000 completado.\n",
            "Episodio 1000/1000 completado.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Configuración del laberinto\n",
        "np.random.seed(42)  # Asegurar reproducibilidad\n",
        "\n",
        "# Crear un laberinto vacío de 100x100\n",
        "maze_size = 100\n",
        "maze = np.zeros((maze_size, maze_size), dtype=int)\n",
        "\n",
        "# Generar obstáculos aleatorios\n",
        "num_obstacles = int(maze_size * maze_size * 0.2)  # 20% del laberinto son obstáculos\n",
        "for _ in range(num_obstacles):\n",
        "    x, y = np.random.randint(0, maze_size, size=2)\n",
        "    maze[x, y] = 1\n",
        "\n",
        "# Definir el objetivo\n",
        "goal_position = (maze_size - 1, maze_size - 1)\n",
        "maze[goal_position] = 2\n",
        "\n",
        "# Asegurar que la posición inicial esté libre\n",
        "start_position = (0, 0)\n",
        "maze[start_position] = 0\n",
        "\n",
        "# Definir las acciones posibles\n",
        "actions = {\n",
        "    0: (-1, 0),  # Arriba\n",
        "    1: (1, 0),   # Abajo\n",
        "    2: (0, -1),  # Izquierda\n",
        "    3: (0, 1)    # Derecha\n",
        "}\n",
        "\n",
        "# Función para validar movimientos\n",
        "def is_valid_move(position, action, maze):\n",
        "    x, y = position\n",
        "    dx, dy = actions[action]\n",
        "    new_x, new_y = x + dx, y + dy\n",
        "    if 0 <= new_x < maze.shape[0] and 0 <= new_y < maze.shape[1]:\n",
        "        return maze[new_x, new_y] != 1  # Retorna True si no es un obstáculo\n",
        "    return False\n",
        "\n",
        "# Configurar parámetros del modelo\n",
        "alpha = 0.1  # Tasa de aprendizaje\n",
        "gamma = 0.9  # Factor de descuento\n",
        "epsilon = 0.1  # Probabilidad de exploración\n",
        "\n",
        "# Inicializar la tabla Q\n",
        "q_table = np.zeros((maze_size, maze_size, len(actions)))\n",
        "\n",
        "# Entrenamiento\n",
        "num_episodes = 1000\n",
        "max_steps_per_episode = 500  # Limitar pasos por episodio\n",
        "\n",
        "for episode in range(num_episodes):\n",
        "    position = start_position\n",
        "    steps = 0\n",
        "\n",
        "    while position != goal_position and steps < max_steps_per_episode:\n",
        "        x, y = position\n",
        "        steps += 1\n",
        "\n",
        "        # Decidir acción (exploración o explotación)\n",
        "        if np.random.random() < epsilon:\n",
        "            action = np.random.choice(list(actions.keys()))  # Exploración\n",
        "        else:\n",
        "            action = np.argmax(q_table[x, y])  # Explotación\n",
        "\n",
        "        # Validar movimiento\n",
        "        if is_valid_move(position, action, maze):\n",
        "            dx, dy = actions[action]\n",
        "            new_position = (x + dx, y + dy)\n",
        "\n",
        "            # Calcular recompensa\n",
        "            reward = 100 if new_position == goal_position else -1\n",
        "\n",
        "            # Actualizar tabla Q\n",
        "            q_table[x, y, action] += alpha * (\n",
        "                reward + gamma * np.max(q_table[new_position]) - q_table[x, y, action]\n",
        "            )\n",
        "\n",
        "            position = new_position\n",
        "        else:\n",
        "            # Penalización por intento de movimiento inválido\n",
        "            q_table[x, y, action] -= alpha\n",
        "\n",
        "    # Mostrar progreso\n",
        "    if (episode + 1) % 100 == 0:\n",
        "        print(f\"Episodio {episode + 1}/{num_episodes} completado.\")\n",
        "\n",
        "# Evaluar el modelo\n",
        "path = [start_position]\n",
        "position = start_position\n",
        "steps = 0\n",
        "\n",
        "while position != goal_position and steps < max_steps_per_episode:\n",
        "    x, y = position\n",
        "    steps += 1\n",
        "    action = np.argmax(q_table[x, y])  # Seleccionar la mejor acción\n",
        "    if is_valid_move(position, action, maze):\n",
        "        dx, dy = actions[action]\n",
        "        position = (x + dx, y + dy)\n",
        "        path.append(position)\n",
        "    else:\n",
        "        break  # Terminar si queda atrapado (no debería ocurrir con buen entrenamiento)\n",
        "\n",
        "# Graficar el recorrido\n",
        "plt.figure(figsize=(10, 10))\n",
        "plt.imshow(maze, cmap=\"gray\", origin=\"upper\")\n",
        "path_x, path_y = zip(*path)\n",
        "plt.plot(path_y, path_x, marker=\"o\", color=\"red\", label=\"Recorrido\")\n",
        "plt.title(\"Recorrido final del agente\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    }
  ]
}